<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jonathan Chen on Jonathan Chen&#39;s Blog</title>
    <link>https://mscb402.github.io/author/jonathan-chen/</link>
    <description>Recent content in Jonathan Chen on Jonathan Chen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 May 2019 15:20:02 +0800</lastBuildDate>
    
	<atom:link href="https://mscb402.github.io/author/jonathan-chen/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP协程之路-事件循环Event Loop</title>
      <link>https://mscb402.github.io/article/2019-5-1/</link>
      <pubDate>Wed, 01 May 2019 15:20:02 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/2019-5-1/</guid>
      <description>经过前面几篇文章，我们的协程终点站马上就要呼之欲出了。但是在到达终点站之前，我们还是需要了解另外一个简单的概念。
这个概念就是我们文章标题的里的“Event Loop”，这是一种流程控制的一种模式。其实非常简单，我们平常编程的时候经常会用到它，只是你可能没有了解过这个东西的名字而已。
Event Loop 我们先来看看wiki上对event loop的介绍
 In computer science, the event loop, message dispatcher, message loop, message pump, or run loop is a programming construct that waits for and dispatches events or messages in a program.</description>
    </item>
    
    <item>
      <title>PHP协程之路-yield from和协程初步</title>
      <link>https://mscb402.github.io/article/2019-4-21/</link>
      <pubDate>Sun, 21 Apr 2019 12:42:45 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/2019-4-21/</guid>
      <description>上一篇文章我们谈了，PHP的一个yield语法糖。这个语法糖已经基本满足协程的必要条件了。
但是，仅仅只有一个yield还是不够。这篇文章我们就来看看，从PHP 7 开始提供的yield from语法。
yield的局限性 假设我们现在有一个需求，希望有2个函数，一个顺序yield1,2,3，另一个函数顺序yielda,b,c。
如下：
function test(){ yield &#39;1&#39;; yield &#39;2&#39;; yield &#39;3&#39;; } function test2(){ yield &#39;a&#39;; yield &#39;b&#39;; yield &#39;c&#39;; }  然后，现在要打算，调用test2()，最终的yield输出是1,a,b,c,2,3。</description>
    </item>
    
    <item>
      <title>PHP协程之路-yield语法糖</title>
      <link>https://mscb402.github.io/article/2019-4-7/</link>
      <pubDate>Sun, 07 Apr 2019 12:18:31 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/2019-4-7/</guid>
      <description>上一篇文章，我们讲到了协程的意义，以及它出现是为了解决哪些痛点。也知道了，协程其实相当于在用户空间，实现一个操作系统的线程调度器。当然从某种意义上说，和操作系统的调度器也不太一样。不过总的来说需要实现以下功能：1.在代码的某一行挂起。2.在某个时间阶段再从刚才挂起的地方拉起，继续向下执行。说白了就是保存现场和恢复现场。在汇编层面，这就比较简单了，保存各个寄存器的值，等需要的时候恢复就可以了。剩下的就是一下内存空间的管理，这里就先不管。
总之，如果要实现切换，必须要深入到底层去操作。而PHP作为一个上层的语言，可以说操作底层比较麻烦。除非PHP虚拟机给你提供了相关功能。
在python中，我知道有一个yield语法可以实现函数在某个地方中断，在从某个地方拉起运行。结果后来居然发现PHP也有这个语法，不愧为世界上最好的语言（逃
认识yield yield是PHP生成器的一个语法。yield和return一样，都会返回数据，但是最大的不同点在于return会结束掉整个函数，下一次再执行，会从头开始。比如
&amp;lt;?php function retFunc(){ return true; echo &amp;quot;hello world&amp;quot;; } retFunc(); retFunc(); retFunc();  这个代码，无论retFunc()这个函数调用多少次，“hello world”永远不会输出出来，因为在打印之前就已经return了，表示函数已经结束。</description>
    </item>
    
    <item>
      <title>PHP协程之路-什么是协程</title>
      <link>https://mscb402.github.io/article/3-29/</link>
      <pubDate>Fri, 29 Mar 2019 13:41:10 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/3-29/</guid>
      <description>协程这几年可谓是大火，作为一个合格的后端开发者，不懂协程简直说不过去。接下来我准备写一系列文章来详细说说协程，并从零实现一个简单的PHP协程框架。我最早接触到协程是从Golang这个语言。现在协程的的框架和应用太多了，目前PHP内用的比较多的是带有协程功能的Swoole扩展，确实对高并发的应用有一定帮助。
我个人还是比较喜欢Golang，总觉得写起来比较舒服，当然这是个人的看法，每个人都有自己喜欢的语言，过多争论也没啥意义。
要了解协程，我们要先了解一下为什么我们要用这个东西。所谓知其然，也要知其所以然。
进程 进程大家实在是太熟悉了，就算是不了解编程的人也大概率知道“一个程序是一个进程，电脑慢的时候打开进程管理器杀死进程即可”。
不过作为专业人士我们当然不能这么片面的理解，至少我们得知道一个程序并不是只有一个进程 :)
远古时期，那会的计算机一次只能执行一个程序。后来设计了分时系统，就是同一个时间段，可以运行多个程序，给使用者一种错觉好像各个程序是一起在运行的。而实际上在我们关于“并发和并行”的文章里也说了，单核计算机其实每一个时间点只能执行一个程序，只是由于执行速度太快看起来好像同时执行一样。
那操作系统就需要开发一个调度器，在1秒里面不断的切换程序。不过“程序”其实是一个很不精确的词，因为它单单表示一个可执行文件，而操作系统在调度的时候不可能去调度一个本地的“可执行文件”。
举个例子，如果是以“可执行文件”作为调度单位，那么你大概会遇到这样的情况。你打开浏览器，并访问谷歌，又打开了一个音乐软件，开始听音乐。然后操作系统开始调度程序，你会发现你浏览器打开的标签一下子就没了，然后你的音乐软件不断的从头开始播放音乐。简直奔溃！这样的电脑不用也罢。
所以，我们要调度程序，不能仅仅调度“可执行程序”，而是要在调度之前先保存当前进度，举个例子调度前记录下你音乐播放到什么位置了，浏览器当前打开的标签内容、滚动条位置等等。
以上，我们称之为“程序上下文（Context）”。在调度之前要保护起程序的执行状态，也就是调度前把这些东西存储在内存里，下一次再读取回来重新执行。
那么程序上下文都包含哪些东西呢？不同操作系统包含的东西都不一样，需要看操作系统的具体实现。
不过有一些东西是通用，比如：1. 当前程序的寄存器状态，2.</description>
    </item>
    
    <item>
      <title>并发与并行，阻塞与非阻塞，异步与同步</title>
      <link>https://mscb402.github.io/article/2019-3-23/</link>
      <pubDate>Sat, 23 Mar 2019 14:42:22 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/2019-3-23/</guid>
      <description>并发与并行、阻塞与非阻塞、异步与同步，这几个概念在服务端开发过程中非常重要。今天我们来说一说这几个技术的区别。请注意，每一个都应该分开理解，不要把混在一起，因为他们之间有一些交集，如果混在一起理解容易使人混淆。
并发与并行 并发和并行其实不一样，在中文的语意下，有时候很容易搞不清楚，毕竟都是“并”字打头的。就像我长期无法快速分辨并联和串联一样。听到词以后缓个几秒才能区分并联和串联的区别。不知道这种情况是不是只有我一个人有。
但是，其实这个东西从英文状态下我们可以很容易的分辨。
并发的英文是Concurrent，并行的英文是Parallel。
我们可以看到“并行”这个英文单词Parallel,他可以和“宇宙”（Universe）这个词形成一个“平行宇宙”（Parallel Universe），所谓的平行宇宙就是在同一个时刻下有多重现实，这就符合我们对并行的定义了。
所以，我们可以从这个词的本意出发来理解并行与并发。
并行只是在同一个时刻有多程序在同时运行。并发就是在一个时间段里面，有多个程序在执行。
看起来这句话还是很难理解，其实他们最大区别就在于，一个是在同一时刻，一个是在同一时间段。时刻表示某一个时间的极限。所谓时间段表示在某一个时间范围，比如说一秒钟， 或者说一分钟。而在这个时间段里面，程序并不一定是同时执行的。
学习过操作系统原理的同学应该都知道，在单核 CPU 里面，不同的程序进程并不是同时在执行，而是有一个叫调度器东西， 在依次执行我们的进程。比如每个进程执行100ms，执行时间到了就切换到下个进程继续执行。而由于 CPU 的运算速度实在太快，所以在我们人的时间观念来看好像是同时执行的一样。而实际上在一秒钟CPU可能已经切换了十多个程序。</description>
    </item>
    
    <item>
      <title>你好世界</title>
      <link>https://mscb402.github.io/article/first_article/</link>
      <pubDate>Thu, 21 Mar 2019 20:46:41 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/first_article/</guid>
      <description>你好啊！
这是我的博客。
学习编程很长时间了，中间也开过几年博客。但是基本没什么人光顾，只是自言自语的写博文，觉得没什么意思，后来也就没继续写下去了。
现在的话，只是觉得作为一个从事技术的人来说，没有写博客，没有对知识进行积累是不太够的。
所以开了一个用Hugo生成的博客，寄存在Github Pages下，希望接下来能开始写一些内容。</description>
    </item>
    
  </channel>
</rss>