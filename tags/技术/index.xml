<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Jonathan Chen&#39;s Blog</title>
    <link>https://mscb402.github.io/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Jonathan Chen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 29 Mar 2019 13:41:10 +0800</lastBuildDate>
    
	<atom:link href="https://mscb402.github.io/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP协程之路-什么是协程</title>
      <link>https://mscb402.github.io/article/3-29/</link>
      <pubDate>Fri, 29 Mar 2019 13:41:10 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/3-29/</guid>
      <description>协程这几年可谓是大火，作为一个合格的后端开发者，不懂协程简直说不过去。接下来我准备写一系列文章来详细说说协程，并从零实现一个简单的PHP协程框架。我最早接触到协程是从Golang这个语言。现在协程的的框架和应用太多了，目前PHP内用的比较多的是带有协程功能的Swoole扩展，确实对高并发的应用有一定帮助。
我个人还是比较喜欢Golang，总觉得写起来比较舒服，当然这是个人的看法，每个人都有自己喜欢的语言，过多争论也没啥意义。
要了解协程，我们要先了解一下为什么我们要用这个东西。所谓知其所以然，也要知其所以然。
进程 进程大家实在是太熟悉了，就算是不了解编程的人也大概率知道“一个程序是一个进程，电脑慢的时候打开进程管理器杀死进程即可”。
不过作为专业人士我们当然不能这么片面的理解，至少我们得知道一个程序并不是只有一个进程 :)
远古时期，那会的计算机一次只能执行一个程序。后来设计了分时系统，就是同一个时间段，可以运行多个程序，给使用者一种错觉好像各个程序是一起在运行的。而实际上在我们关于“并发和并行”的文章里也说了，单核计算机其实每一个时间点只能执行一个程序，只是由于执行速度太快看起来好像同时执行一样。
那操作系统就需要开发一个调度器，在1秒里面不断的切换程序。不过“程序”其实是一个很不精确的词，因为它单单表示一个可执行文件，而操作系统在调度的时候不可能去调度一个本地的“可执行文件”。
举个例子，如果是以“可执行文件”作为调度单位，那么你大概会遇到这样的情况。你打开浏览器，并访问谷歌，又打开了一个音乐软件，开始听音乐。然后操作系统开始调度程序，你会发现你浏览器打开的标签一下子就没了，然后你的音乐软件不断的从头开始播放音乐。简直奔溃！这样的电脑不用也罢。
所以，我们要调度程序，不能仅仅调度“可执行程序”，而是要在调度之前先保存当前进度，举个例子调度前记录下你音乐播放到什么位置了，浏览器当前打开的标签内容、滚动条位置。
以上，我们称之为“程序上下文context”。在调度之前要保护起程序的执行状态，也就是调度前把这些东西存储在内存里，下一次再读取回来重新执行。
那么程序上下文都包含哪些东西呢？不同操作系统包含的东西都不一样，需要看操作系统的具体实现。
不过有一些东西是通用，比如：1. 当前程序的寄存器状态，2.</description>
    </item>
    
  </channel>
</rss>