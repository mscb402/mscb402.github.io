<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并行 on Jonathan Chen&#39;s Blog</title>
    <link>https://mscb402.github.io/tags/%E5%B9%B6%E8%A1%8C/</link>
    <description>Recent content in 并行 on Jonathan Chen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 21 Apr 2019 12:42:45 +0800</lastBuildDate>
    
	<atom:link href="https://mscb402.github.io/tags/%E5%B9%B6%E8%A1%8C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP协程之路-yield from和协程初步</title>
      <link>https://mscb402.github.io/article/2019-4-21/</link>
      <pubDate>Sun, 21 Apr 2019 12:42:45 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/2019-4-21/</guid>
      <description>上一篇文章我们谈了，PHP的一个yield语法糖。这个语法糖已经基本满足协程的必要条件了。
但是，仅仅只有一个yield还是不够。这篇文章我们就来看看，从PHP 7 开始提供的yield from语法。
yield的局限性 假设我们现在有一个需求，希望有2个函数，一个顺序yield1,2,3，另一个函数顺序yielda,b,c。
如下：
function test(){ yield &#39;1&#39;; yield &#39;2&#39;; yield &#39;3&#39;; } function test2(){ yield &#39;a&#39;; yield &#39;b&#39; yield &#39;c&#39;; }  然后，现在要打算，调用test2()，最终的yield输出是1,a,b,c,2,3。</description>
    </item>
    
    <item>
      <title>并发与并行，阻塞与非阻塞，异步与同步</title>
      <link>https://mscb402.github.io/article/2019-3-23/</link>
      <pubDate>Sat, 23 Mar 2019 14:42:22 +0800</pubDate>
      
      <guid>https://mscb402.github.io/article/2019-3-23/</guid>
      <description>并发与并行、阻塞与非阻塞、异步与同步，这几个概念在服务端开发过程中非常重要。今天我们来说一说这几个技术的区别。请注意，每一个都应该分开理解，不要把混在一起，因为他们之间有一些交集，如果混在一起理解容易使人混淆。
并发与并行 并发和并行其实不一样，在中文的语意下，有时候很容易搞不清楚，毕竟都是“并”字打头的。就像我长期无法快速分辨并联和串联一样。听到词以后缓个几秒才能区分并联和串联的区别。不知道这种情况是不是只有我一个人有。
但是，其实这个东西从英文状态下我们可以很容易的分辨。
并发的英文是Concurrent，并行的英文是Parallel。
我们可以看到“并行”这个英文单词Parallel,他可以和“宇宙”（Universe）这个词形成一个“平行宇宙”（Parallel Universe），所谓的平行宇宙就是在同一个时刻下有多重现实，这就符合我们对并行的定义了。
所以，我们可以从这个词的本意出发来理解并行与并发。
并行只是在同一个时刻有多程序在同时运行。并发就是在一个时间段里面，有多个程序在执行。
看起来这句话还是很难理解，其实他们最大区别就在于，一个是在同一时刻，一个是在同一时间段。时刻表示某一个时间的极限。所谓时间段表示在某一个时间范围，比如说一秒钟， 或者说一分钟。而在这个时间段里面，程序并不一定是同时执行的。
学习过操作系统原理的同学应该都知道，在单核 CPU 里面，不同的程序进程并不是同时在执行，而是有一个叫调度器东西， 在依次执行我们的进程。比如每个进程执行100ms，执行时间到了就切换到下个进程继续执行。而由于 CPU 的运算速度实在太快，所以在我们人的时间观念来看好像是同时执行的一样。而实际上在一秒钟CPU可能已经切换了十多个程序。</description>
    </item>
    
  </channel>
</rss>